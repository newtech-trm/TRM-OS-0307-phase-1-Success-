#!/usr/bin/env python
# coding: utf-8

"""
Script ƒë·ªÉ b∆°m d·ªØ li·ªáu Founder ƒë·∫∑c bi·ªát v√†o Neo4j theo ƒë√∫ng Ontology v3.2.
Founder l√† m·ªôt InternalAgent ƒë·∫∑c bi·ªát, l√† ngu·ªìn ph√°t ƒë·ªông Recognition, ƒë·ªãnh h∆∞·ªõng tri·∫øt l√Ω, kh·ªüi t·∫°o v√≤ng l·∫∑p ti·∫øn h√≥a.

Prerequisites:
- API server ph·∫£i ƒëang ch·∫°y tr√™n c·ªïng 8000
- Neo4j ƒë√£ k·∫øt n·ªëi
- Ontology v3.2 ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi ƒë·ªãnh nghƒ©a Founder
"""

import requests
import uuid
import time
import sys
import os
from datetime import datetime, timedelta

# Add the project root to the Python path to allow imports from trm_api
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from trm_api.db.session import get_driver
from rich.console import Console
from rich.table import Table

# --- Configuration ---
BASE_URL = "http://127.0.0.1:8000/api/v1"
console = Console()

# --- Sample Data cho Founder (InternalAgent ƒë·∫∑c bi·ªát) ---
FOUNDER_DATA = {
    "name": "TRM Founder",
    "purpose": "To initiate and embody the TRM vision, driving the evolution of the TRM Operating System.",
    "description": "Founder c·ªßa TRM, ng∆∞·ªùi ph√°t ƒë·ªông Recognition ƒë·∫ßu ti√™n, ƒë·ªãnh h∆∞·ªõng tri·∫øt l√Ω c·ªßa h·ªá th·ªëng",
    "agent_type": "InternalAgent", # Ph·∫£i l√† InternalAgent theo Ontology v3.2
    "status": "active",
    "capabilities": ["recognition", "vision_setting", "strategic_planning", "resource_allocation"],
    "job_title": "CEO",
    "department": "Management",
    "is_founder": True,  # ƒê√°nh d·∫•u ƒë√¢y l√† Founder
    "founder_recognition_authority": True  # C√≥ quy·ªÅn t·∫°o Recognition
}

# --- C√°c Resource, Project v√† Agent m√† Founder s·∫Ω c√≥ relationship ---
TEST_RESOURCES = [
    {
        "name": "Ontology v3.2 Documentation",
        "description": "T√†i li·ªáu ƒë·ªãnh nghƒ©a chi ti·∫øt Ontology v3.2",
        "resourceType": "Knowledge",
        "status": "active",
        "details": {"format": "Markdown Document", "location": "docs/ontology_v3.2.md", "accessLevel": "internal"}
    },
    {
        "name": "TRM-OS Backend System",
        "description": "H·ªá th·ªëng backend cho TRM-OS v·ªõi Neo4j",
        "resourceType": "Tool",
        "status": "in_development",
        "details": {"tool_category": "Software Infrastructure", "version": "1.0", "access_url": "http://127.0.0.1:8000"}
    }
]

TEST_PROJECTS = [
    {
        "title": "Ontology v3.2 Implementation",
        "description": "Tri·ªÉn khai ƒë·∫ßy ƒë·ªß Ontology v3.2 v√†o h·ªá th·ªëng TRM-OS",
        "status": "active",
        "priority": 1
    },
    {
        "title": "AI Agent Framework Development",
        "description": "Ph√°t tri·ªÉn framework cho Agent t∆∞∆°ng t√°c t·ª± ƒë·ªông v·ªõi h·ªá th·ªëng",
        "status": "planned",
        "priority": 2
    }
]

TEST_AGENTS = [
    {
        "name": "AGE-System",
        "purpose": "To serve as the central Artificial Genesis Engine, coordinating system-wide operations and learning.",
        "description": "Artificial Genesis Engine - H·ªá th·ªëng AI trung t√¢m c·ªßa TRM-OS",
        "agent_type": "AGE",
        "status": "active",
        "capabilities": ["agent_coordination", "system_management", "learning", "event_processing"]
    },
    {
        "name": "RecognitionAgent",
        "purpose": "To identify and process Recognitions from various data sources, fueling the system's evolution.",
        "description": "Agent chuy√™n ph√°t hi·ªán Recognition t·ª´ d·ªØ li·ªáu v√† ho·∫°t ƒë·ªông",
        "agent_type": "AIAgent",
        "status": "active",
        "capabilities": ["pattern_recognition", "data_analysis", "recommendation"]
    }
]

# --- Helper Functions ---
def _post_request(endpoint: str, data: dict, description: str) -> dict:
    """Helper to send POST request and handle response."""
    try:
        response = requests.post(f"{BASE_URL}{endpoint}", json=data)
        response.raise_for_status()  # Raise an exception for bad status codes (4xx or 5xx)
        console.print(f"‚úÖ [green]Successfully created {description}:[/green] {data.get('name') or data.get('title')}")
        return response.json()
    except requests.exceptions.HTTPError as http_err:
        console.print(f"‚ùå [bold red]Error creating {description}:[/bold red] {http_err}")
        # In chi ti·∫øt l·ªói t·ª´ response c·ªßa server
        try:
            error_details = http_err.response.json()
            console.print(f"[red]Server Response:[/red] {error_details}")
        except ValueError:
            console.print(f"[red]Server Response (non-JSON):[/red] {http_err.response.text}")
        return None

def _create_relationship_request(endpoint: str, description: str, data=None) -> bool:
    """Helper to send POST request for creating a relationship."""
    try:
        if data:
            response = requests.post(f"{BASE_URL}{endpoint}", json=data)
        else:
            response = requests.post(f"{BASE_URL}{endpoint}")
            
        response.raise_for_status()  # Raise an exception for bad status codes
        console.print(f"üîó [cyan]Successfully created relationship:[/cyan] {description}")
        return True
    except requests.exceptions.HTTPError as http_err:
        console.print(f"‚ùå [bold red]Error creating relationship {description}:[/bold red] {http_err}")
        # In chi ti·∫øt l·ªói t·ª´ response c·ªßa server
        try:
            error_details = http_err.response.json()
            console.print(f"[red]Server Response:[/red] {error_details}")
        except ValueError:
            console.print(f"[red]Server Response (non-JSON):[/red] {http_err.response.text}")
        return False

def health_check(retries=5, delay=2) -> bool:
    """Checks if the API is running, with a retry mechanism."""
    console.print("üîç Checking if API is running...")
    # L·∫•y base URL kh√¥ng bao g·ªìm /api/v1 ƒë·ªÉ check health endpoint
    base_server_url = BASE_URL.split('/api/')[0]
    for attempt in range(retries):
        try:
            response = requests.get(f"{base_server_url}/health")
            if response.status_code == 200:
                console.print("‚úÖ [green]API is running![/green]")
                return True
            else:
                console.print(f"‚ö†Ô∏è [yellow]API returned status code {response.status_code}[/yellow]")
        except requests.exceptions.ConnectionError:
            console.print(f"‚ö†Ô∏è [yellow]API not responding (attempt {attempt+1}/{retries}). Waiting {delay} seconds...[/yellow]")
            time.sleep(delay)
    
    console.print("‚ùå [bold red]API is not running. Please start the server first.[/bold red]")
    return False

def create_founder() -> dict:
    """Creates the Founder special InternalAgent."""
    console.print("\nüöÄ Creating Founder (Special InternalAgent)...")
    response = _post_request("/agents", FOUNDER_DATA, "Founder")
    return response

def create_test_resources() -> list:
    """Creates test resources for relationships."""
    console.print("\nüì¶ Creating test resources...")
    resources = []
    for resource_data in TEST_RESOURCES:
        response = _post_request("/resources", resource_data, "Resource")
        if response:
            resources.append(response)
    return resources

def create_test_projects() -> list:
    """Creates test projects for relationships."""
    console.print("\nüìã Creating test projects...")
    projects = []
    for project_data in TEST_PROJECTS:
        response = _post_request("/projects", project_data, "Project")
        if response:
            projects.append(response)
    return projects

def create_test_agents() -> list:
    """Creates test agents for relationships."""
    console.print("\nü§ñ Creating test agents...")
    agents = []
    for agent_data in TEST_AGENTS:
        response = _post_request("/agents", agent_data, "Agent")
        if response:
            agents.append(response)
    return agents

def create_founder_relationships(founder: dict, resources: list, projects: list, agents: list) -> int:
    """Creates relationships specific to the Founder role."""
    console.print("\nüîó Creating Founder relationships...")
    relationships_created_count = 0
    
    # --- Founder RECOGNIZES Resources ---
    # Founder nh·∫≠n di·ªán gi√° tr·ªã v√† ti·ªÅm nƒÉng trong resources
    for resource in resources:
        endpoint = f"/agents/{founder['agentId']}/recognizes/{resource['resourceId']}"
        rel_data = {
            "recognitionDate": datetime.now().isoformat(),
            "valueRecognized": "Gi√° tr·ªã chi·∫øn l∆∞·ª£c cho s·ª± ph√°t tri·ªÉn c·ªßa TRM-OS",
            "potentialUse": "L√†m n·ªÅn t·∫£ng cho c√°c t√≠nh nƒÉng v√† workflow m·ªõi",
            "notes": f"Founder nh·∫≠n di·ªán gi√° tr·ªã trong {resource['name']}"
        }
        desc = f"Founder -> RECOGNIZES -> Resource:{resource['name']}"
        if _create_relationship_request(endpoint, desc, rel_data):
            relationships_created_count += 1
    
    # --- Founder APPROVES Projects ---
    # Founder ph√™ duy·ªát v√† ƒë·ªãnh h∆∞·ªõng c√°c d·ª± √°n chi·∫øn l∆∞·ª£c
    for project in projects:
        endpoint = f"/agents/{founder['agentId']}/approves/{project['projectId']}"
        rel_data = {
            "approvalDate": datetime.now().isoformat(),
            "priority": project['priority'],
            "strategicAlignment": "Alignment with TRM vision and mission",
            "notes": f"Founder ph√™ duy·ªát d·ª± √°n {project['name']}"
        }
        desc = f"Founder -> APPROVES -> Project:{project['name']}"
        if _create_relationship_request(endpoint, desc, rel_data):
            relationships_created_count += 1
    
    # --- Founder GUIDES Agents ---
    # Founder ƒë·ªãnh h∆∞·ªõng v√† qu·∫£n l√Ω c√°c agent
    for agent in agents:
        endpoint = f"/agents/{founder['agentId']}/guides/{agent['agentId']}"
        rel_data = {
            "since": datetime.now().isoformat(),
            "guidanceType": "strategic",
            "notes": f"Founder ƒë·ªãnh h∆∞·ªõng ho·∫°t ƒë·ªông c·ªßa {agent['name']}"
        }
        desc = f"Founder -> GUIDES -> Agent:{agent['name']}"
        if _create_relationship_request(endpoint, desc, rel_data):
            relationships_created_count += 1
    
    # --- Specific relationship for AGE ---
    # AGE l√† agent ƒë·∫∑c bi·ªát, c√≥ m·ªëi quan h·ªá c·ªông sinh v·ªõi Founder
    age_agent = next((a for a in agents if a['agent_type'] == 'AGE'), None)
    if age_agent:
        # AGE MANAGED_BY Founder
        endpoint = f"/agents/{age_agent['agentId']}/managed-by/{founder['agentId']}"
        rel_data = {
            "since": datetime.now().isoformat(),
            "managementType": "strategic_direction",
            "notes": "AGE ƒë∆∞·ª£c qu·∫£n l√Ω v√† ƒë·ªãnh h∆∞·ªõng b·ªüi Founder"
        }
        desc = f"AGE -> MANAGED_BY -> Founder"
        if _create_relationship_request(endpoint, desc, rel_data):
            relationships_created_count += 1
            
    return relationships_created_count

def verify_founder_in_neo4j(founder_id: str) -> bool:
    """Verify that the Founder exists in Neo4j with correct properties."""
    console.print("\nüîç Verifying Founder in Neo4j...")
    try:
        # Get a Neo4j driver
        driver = get_driver()
        with driver.session() as session:
            result = session.run(
                """MATCH (f:Agent {agentId: $agentId}) 
                   RETURN f.name AS name, f.agent_type AS agentType, f.is_founder AS isFounder""",
                agentId=founder_id
            )
            record = result.single()
            if record and record["isFounder"] and record["agentType"] == "InternalAgent":
                console.print(f"‚úÖ [green]Verified Founder in Neo4j:[/green] {record['name']}")
                return True
            else:
                console.print("‚ùå [bold red]Founder verification failed in Neo4j[/bold red]")
                return False
            
    except Exception as e:
        console.print(f"‚ùå [bold red]Error verifying Founder in Neo4j:[/bold red] {str(e)}")
        return False

def main():
    console.rule("[bold cyan]üöÄ Seeding Founder (InternalAgent) Data üöÄ[/bold cyan]")

    if not health_check():
        console.rule("[bold red]Seeding Aborted[/bold red]")
        return

    # --- Create Founder and test entities ---
    founder = create_founder()
    resources = create_test_resources()
    projects = create_test_projects()
    agents = create_test_agents()

    if not founder:
        console.print("‚ùå [bold red]Failed to create Founder. Aborting further seeding.[/bold red]")
        return

    # --- Create Founder Relationships ---
    relationship_count = create_founder_relationships(founder, resources, projects, agents)

    # --- Verify Founder in Neo4j ---
    neo4j_verified = verify_founder_in_neo4j(founder['agentId'])

    # --- Summary ---
    console.rule("[bold blue]Summary of Founder Seeding[/bold blue]")
    table = Table(title="Created Items")
    table.add_column("Item Type", justify="right", style="cyan", no_wrap=True)
    table.add_column("Count", justify="center", style="magenta")
    table.add_column("Status", justify="left", style="green")
    
    table.add_row("Founder", "1", "‚úÖ Created" if founder else "‚ùå Failed")
    table.add_row("Resources", str(len(resources)), "‚úÖ Created" if resources else "‚ùå Failed")
    table.add_row("Projects", str(len(projects)), "‚úÖ Created" if projects else "‚ùå Failed")
    table.add_row("Agents", str(len(agents)), "‚úÖ Created" if agents else "‚ùå Failed")
    table.add_row("Founder Relationships", str(relationship_count), "‚úÖ Created" if relationship_count > 0 else "‚ùå Failed")
    table.add_row("Neo4j Verification", "1", "‚úÖ Verified" if neo4j_verified else "‚ùå Failed")
    
    console.print(table)

    if founder and relationship_count > 0 and neo4j_verified:
        console.rule("[bold green]‚úÖ Founder Seeding Completed Successfully ‚úÖ[/bold green]")
    else:
        console.rule("[bold red]‚ö†Ô∏è Founder Seeding Completed with Issues ‚ö†Ô∏è[/bold red]")

if __name__ == "__main__":
    main()

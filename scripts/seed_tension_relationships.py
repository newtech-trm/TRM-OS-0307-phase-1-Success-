#!/usr/bin/env python
# coding: utf-8

"""
Script ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u cho Tension v√† c√°c m·ªëi quan h·ªá theo Ontology V3.2:
- RESOLVES: Task -> Tension
- LEADS_TO_WIN: Tension -> WIN

Prerequisites:
- API server ph·∫£i ƒëang ch·∫°y tr√™n c·ªïng 8000
- Neo4j ƒë√£ k·∫øt n·ªëi
- ƒê√£ c√≥ s·∫µn Task v√† WIN entities trong database
"""

import requests
import uuid
import time
import sys
import os
import json
import random
from datetime import datetime, timedelta
from typing import List, Dict, Any
from rich.console import Console
from rich.table import Table

# --- Configuration ---
BASE_URL = "http://127.0.0.1:8001/api/v1"
console = Console()

# --- Sample Data cho Tension ---
TENSIONS_DATA = [
    {
        "title": "Thi·∫øu t√†i li·ªáu API ƒë·∫ßy ƒë·ªß", 
        "description": "T√†i li·ªáu API hi·ªán t·∫°i kh√¥ng ƒë·∫ßy ƒë·ªß v√† kh√¥ng ph·∫£n √°nh ƒë√∫ng c√°c m·ªëi quan h·ªá theo Ontology V3.2", 
        "status": "Open",
        "priority": 2,
        "source": "FounderInput",
        "tensionType": "Problem",
        "currentState": "T√†i li·ªáu API kh√¥ng ƒë·∫ßy ƒë·ªß",
        "desiredState": "T√†i li·ªáu API ƒë·∫ßy ƒë·ªß, ch√≠nh x√°c theo Ontology V3.2",
        "impactAssessment": "Cao, ·∫£nh h∆∞·ªüng ƒë·∫øn kh·∫£ nƒÉng ph√°t tri·ªÉn c·ªßa ƒë·ªôi",
        "tags": ["documentation", "api", "ontology"]
    },
    {
        "title": "C·∫ßn c·∫£i thi·ªán hi·ªáu su·∫•t truy v·∫•n Neo4j", 
        "description": "C√°c truy v·∫•n Neo4j hi·ªán t·∫°i ch∆∞a ƒë∆∞·ª£c t·ªëi ∆∞u, d·∫´n ƒë·∫øn t·ªëc ƒë·ªô ch·∫≠m khi l√†m vi·ªác v·ªõi d·ªØ li·ªáu l·ªõn", 
        "status": "Open",
        "priority": 3,
        "source": "TeamInput",
        "tensionType": "Problem",
        "currentState": "Truy v·∫•n Neo4j ch∆∞a t·ªëi ∆∞u, performance ch·∫≠m",
        "desiredState": "Truy v·∫•n Neo4j ƒë∆∞·ª£c t·ªëi ∆∞u, tƒÉng t·ªëc ƒë√°ng k·ªÉ",
        "impactAssessment": "Trung b√¨nh, ·∫£nh h∆∞·ªüng ƒë·∫øn UX khi h·ªá th·ªëng ph√°t tri·ªÉn",
        "tags": ["performance", "neo4j", "optimization"]
    },
    {
        "title": "C∆° h·ªôi t√≠ch h·ª£p AI v√†o h·ªá th·ªëng", 
        "description": "C√≥ c∆° h·ªôi t√≠ch h·ª£p AI v√†o h·ªá th·ªëng ƒë·ªÉ t·ª± ƒë·ªông h√≥a quy tr√¨nh v√† tƒÉng hi·ªáu qu·∫£", 
        "status": "Open",
        "priority": 2,
        "source": "AIAssistant",
        "tensionType": "Opportunity",
        "currentState": "Ch∆∞a c√≥ AI trong h·ªá th·ªëng",
        "desiredState": "AI ƒë∆∞·ª£c t√≠ch h·ª£p ƒë·ªÉ h·ªó tr·ª£ ng∆∞·ªùi d√πng",
        "impactAssessment": "Cao, ti·ªÅm nƒÉng tƒÉng ƒë√°ng k·ªÉ hi·ªáu su·∫•t",
        "tags": ["ai", "automation", "innovation"]
    },
    {
        "title": "Thi·∫øu ki·ªÉm th·ª≠ t·ª± ƒë·ªông", 
        "description": "H·ªá th·ªëng c√≤n thi·∫øu ki·ªÉm th·ª≠ t·ª± ƒë·ªông cho nhi·ªÅu ph·∫ßn quan tr·ªçng", 
        "status": "Open",
        "priority": 1,
        "source": "TeamInput",
        "tensionType": "Problem",
        "currentState": "Ki·ªÉm th·ª≠ th·ªß c√¥ng, thi·∫øu coverage",
        "desiredState": "Ki·ªÉm th·ª≠ t·ª± ƒë·ªông v·ªõi coverage cao",
        "impactAssessment": "Cao, ·∫£nh h∆∞·ªüng ƒë·∫øn ch·∫•t l∆∞·ª£ng code v√† t·ªëc ƒë·ªô ph√°t tri·ªÉn",
        "tags": ["testing", "automation", "quality"]
    },
    {
        "title": "C·∫ßn c·∫£i thi·ªán UX c·ªßa dashboard", 
        "description": "UX hi·ªán t·∫°i c·ªßa dashboard kh√≥ s·ª≠ d·ª•ng v√† kh√¥ng tr·ª±c quan", 
        "status": "Open",
        "priority": 2,
        "source": "UserFeedback",
        "tensionType": "Problem",
        "currentState": "Dashboard UX ph·ª©c t·∫°p, kh√≥ s·ª≠ d·ª•ng",
        "desiredState": "Dashboard UX tr·ª±c quan, d·ªÖ s·ª≠ d·ª•ng",
        "impactAssessment": "Trung b√¨nh, ·∫£nh h∆∞·ªüng ƒë·∫øn tr·∫£i nghi·ªám ng∆∞·ªùi d√πng",
        "tags": ["ux", "dashboard", "design"]
    }
]

# --- Helper Functions ---

def print_status(message, is_success=True):
    """In th√¥ng b√°o tr·∫°ng th√°i c√≥ ƒë·ªãnh d·∫°ng."""
    prefix = "‚úÖ SUCCESS:" if is_success else "‚ùå ERROR:"
    print(f"{prefix} {message}")

def _post_request(endpoint: str, data: dict, description: str):
    """Helper ƒë·ªÉ g·ª≠i POST request v√† x·ª≠ l√Ω response."""
    try:
        response = requests.post(
            f"{BASE_URL}/{endpoint}",
            json=data,
            headers={"Content-Type": "application/json"}
        )
        response.raise_for_status()  # Raise an exception for 4XX/5XX responses
        result = response.json()
        print_status(f"{description}: {result}")
        return result
    except requests.exceptions.RequestException as e:
        error_content = e.response.json() if hasattr(e, 'response') and e.response and e.response.headers.get('content-type') == 'application/json' else str(e)
        print_status(f"Failed to {description}. Details: {error_content}", is_success=False)
        return None

def get_entities(entity_name):
    """L·∫•y t·∫•t c·∫£ entities c·ªßa m·ªôt lo·∫°i nh·∫•t ƒë·ªãnh (v√≠ d·ª•: 'tasks', 'wins')."""
    try:
        response = requests.get(f"{BASE_URL}/{entity_name}/")
        response.raise_for_status()
        entities = response.json()
        if not entities:
            print_status(f"Kh√¥ng t√¨m th·∫•y entity n√†o thu·ªôc lo·∫°i '{entity_name}'. Kh√¥ng th·ªÉ t·∫°o m·ªëi quan h·ªá.", is_success=False)
            return []
        print_status(f"ƒê√£ l·∫•y th√†nh c√¥ng {len(entities)} {entity_name}.")
        return entities
    except requests.exceptions.RequestException as e:
        print_status(f"Kh√¥ng th·ªÉ l·∫•y {entity_name}: {e}", is_success=False)
        return []

def create_relationship(source_type, source_id, relationship_type, target_type, target_id, params=None):
    """T·∫°o m·ªôt m·ªëi quan h·ªá gi·ªØa hai entities."""
    endpoint = f"{source_type}/{source_id}/{relationship_type}/{target_id}"
    if params:
        endpoint += "?" + "&".join([f"{k}={v}" for k, v in params.items()])
    
    try:
        response = requests.post(f"{BASE_URL}/{endpoint}")
        response.raise_for_status()
        print_status(f"ƒê√£ t·∫°o m·ªëi quan h·ªá {relationship_type} gi·ªØa {source_type} v√† {target_type}")
        return response.json()
    except requests.exceptions.RequestException as e:
        error_content = e.response.json() if hasattr(e, 'response') and e.response and e.response.headers.get('content-type') == 'application/json' else str(e)
        print_status(f"Kh√¥ng th·ªÉ t·∫°o m·ªëi quan h·ªá qua {endpoint}. Details: {error_content}", is_success=False)
        return None

def health_check(retries=5, delay=2):
    """Ki·ªÉm tra xem API c√≥ ƒëang ch·∫°y kh√¥ng, v·ªõi c∆° ch·∫ø retry."""
    for i in range(retries):
        try:
            response = requests.get(f"{BASE_URL}/health")
            if response.status_code == 200:
                print_status("API server is running and healthy.")
                return True
        except requests.exceptions.ConnectionError:
            pass
        
        if i < retries - 1:
            print(f"API server not available. Retrying in {delay} seconds...")
            time.sleep(delay)
    
    print_status("API server is not running or not healthy. Please start the API server before running this script.", is_success=False)
    return False

def create_tensions():
    """T·∫°o c√°c tension t·ª´ d·ªØ li·ªáu m·∫´u."""
    created_tensions = []
    for tension_data in TENSIONS_DATA:
        result = _post_request("tensions/", tension_data, f"Created tension '{tension_data['title']}'")
        if result:
            created_tensions.append(result)
    
    console.print(f"Created {len(created_tensions)} tensions")
    return created_tensions

def create_tension_relationships(tensions, tasks, wins):
    """T·∫°o c√°c m·ªëi quan h·ªá gi·ªØa Tension v√† c√°c entity kh√°c theo Ontology V3.2."""
    # Hi·ªÉn th·ªã th√¥ng tin
    table = Table(title="Entity Counts")
    table.add_column("Entity Type")
    table.add_column("Count")
    table.add_row("Tensions", str(len(tensions)))
    table.add_row("Tasks", str(len(tasks)))
    table.add_row("WINs", str(len(wins)))
    console.print(table)
    
    # 1. T·∫°o m·ªëi quan h·ªá RESOLVES (Task -> Tension)
    print("\nüîó T·∫°o m·ªëi quan h·ªá 'RESOLVES' (Task -> Tension)...")
    if tasks and tensions:
        for i, tension in enumerate(tensions):
            # Assign 1-2 tasks to resolve each tension
            num_tasks = random.randint(1, min(2, len(tasks)))
            selected_tasks = random.sample(tasks, num_tasks)
            
            for task in selected_tasks:
                try:
                    tension_id = tension.get('uid') or tension.get('id') or tension.get('tension_id')
                    task_id = task.get('uid') or task.get('id') or task.get('task_id')
                    
                    if tension_id and task_id:
                        create_relationship(
                            "tasks", task_id,
                            "resolves", "tensions", tension_id
                        )
                except Exception as e:
                    print_status(f"Error creating RESOLVES relationship: {str(e)}", is_success=False)
    
    # 2. T·∫°o m·ªëi quan h·ªá LEADS_TO_WIN (Tension -> WIN)
    print("\nüîó T·∫°o m·ªëi quan h·ªá 'LEADS_TO_WIN' (Tension -> WIN)...")
    if tensions and wins:
        for i, tension in enumerate(tensions):
            # Not every tension leads to a win
            if random.random() < 0.7:  # 70% chance
                selected_win = random.choice(wins)
                
                try:
                    tension_id = tension.get('uid') or tension.get('id') or tension.get('tension_id')
                    win_id = selected_win.get('uid') or selected_win.get('id') or selected_win.get('win_id')
                    
                    if tension_id and win_id:
                        # Add relationship params
                        params = {
                            "contribution_level": random.randint(1, 5),
                            "direct_contribution": random.choice(["true", "false"])
                        }
                        
                        create_relationship(
                            "tensions", tension_id,
                            "leads-to-win", "wins", win_id,
                            params
                        )
                except Exception as e:
                    print_status(f"Error creating LEADS_TO_WIN relationship: {str(e)}", is_success=False)

def main():
    """H√†m ch√≠nh ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u cho Tension v√† c√°c m·ªëi quan h·ªá."""
    console.print("\n[bold green]üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o d·ªØ li·ªáu m·∫´u cho Tension v√† c√°c m·ªëi quan h·ªá[/bold green]\n")
    
    # Ki·ªÉm tra k·∫øt n·ªëi API
    if not health_check():
        return
    
    # 1. T·∫°o c√°c Tension m·ªõi
    console.print("\n[bold blue]T·∫°o c√°c Tension m·ªõi[/bold blue]")
    tensions = create_tensions()
    
    # 2. L·∫•y c√°c Task v√† WIN hi·ªán c√≥
    console.print("\n[bold blue]L·∫•y c√°c Task v√† WIN hi·ªán c√≥[/bold blue]")
    tasks = get_entities("tasks")
    wins = get_entities("wins")
    
    # 3. T·∫°o c√°c m·ªëi quan h·ªá
    console.print("\n[bold blue]T·∫°o c√°c m·ªëi quan h·ªá theo Ontology V3.2[/bold blue]")
    create_tension_relationships(tensions, tasks, wins)
    
    console.print("\n[bold green]üéâ Ho√†n th√†nh qu√° tr√¨nh t·∫°o d·ªØ li·ªáu m·∫´u![/bold green]")

if __name__ == "__main__":
    main()

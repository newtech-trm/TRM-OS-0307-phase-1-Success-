from pydantic import BaseModel, Field, ConfigDict
from typing import Optional, List, Dict, Any
from datetime import datetime
import uuid

# Pydantic's `model_config` is the replacement for `Config` class in V2
# We use aliases to map between camelCase (JSON payload) and snake_case (Python model)

class ProjectBase(BaseModel):
    # Core properties
    title: str = Field(..., min_length=3, max_length=100, description="The title of the project.")
    description: Optional[str] = Field(None, max_length=1000, description="A detailed description of the project.")
    status: str = Field("active", description="The current status of the project (e.g., active, completed, on_hold).")
    
    # Extended properties from Ontology V3.2
    goal: Optional[str] = Field(None, description="The primary objective that this project aims to achieve")
    scope: Optional[str] = Field(None, description="Boundaries and limitations of the project")
    priority: Optional[int] = Field(3, ge=1, le=5, description="Priority level from 1 (highest) to 5 (lowest)")
    project_type: Optional[str] = Field(None, description="Type of project, e.g., 'development', 'research', 'improvement'")
    tags: Optional[List[str]] = Field(None, description="Keywords for easier categorization and search")
    start_date: Optional[datetime] = Field(None, description="When the project was started or is scheduled to start")
    target_end_date: Optional[datetime] = Field(None, description="Target date for project completion")
    actual_end_date: Optional[datetime] = Field(None, description="Actual date when project was completed")
    health: Optional[str] = Field("normal", description="Current health status of the project, e.g., 'at_risk', 'normal', 'excelling'")
    metrics: Optional[Dict[str, Any]] = Field(None, description="Key performance indicators and success metrics for the project")
    is_strategic: Optional[bool] = Field(False, description="Whether this is a strategic project aligned with organizational goals")

    model_config = ConfigDict(
        from_attributes=True,  # Enable ORM mode to map neomodel objects to Pydantic models
        json_schema_extra={
            "example": {
                "title": "AI-Powered Task Automation",
                "description": "A project to automate internal workflows using AI agents.",
                "status": "active",
                "goal": "Reduce manual task processing time by 50%",
                "scope": "All internal workflows in the Sales and Marketing departments",
                "priority": 2,
                "project_type": "development",
                "tags": ["AI", "automation", "workflow"],
                "health": "normal",
                "is_strategic": True
            }
        }
    )

class ProjectCreate(ProjectBase):
    """Model for creating a new project with all available fields"""
    # Optional parent project reference
    parent_project_id: Optional[str] = Field(None, description="UID of the parent project if this is a subproject")

class ProjectUpdate(BaseModel):
    """Model for updating an existing project"""
    # Core properties
    title: Optional[str] = Field(None, min_length=3, max_length=100)
    description: Optional[str] = Field(None, max_length=1000)
    status: Optional[str] = Field(None)
    
    # Extended properties
    goal: Optional[str] = Field(None)
    scope: Optional[str] = Field(None)
    priority: Optional[int] = Field(None, ge=1, le=5)
    project_type: Optional[str] = Field(None)
    tags: Optional[List[str]] = Field(None)
    start_date: Optional[datetime] = Field(None)
    target_end_date: Optional[datetime] = Field(None)
    actual_end_date: Optional[datetime] = Field(None)
    health: Optional[str] = Field(None)
    metrics: Optional[Dict[str, Any]] = Field(None)
    is_strategic: Optional[bool] = Field(None)
    
    # Optional parent project reference for updating hierarchical structure
    parent_project_id: Optional[str] = Field(None)

# This model represents the data as it is stored in the database
# It includes fields that are generated by the system (e.g., projectId, createdAt)
class ProjectInDB(ProjectBase):
    # Using Field with alias to map the database's camelCase to Python's snake_case
    # Align these fields with the BaseNode graph_model
    uid: str
    created_at: datetime
    updated_at: datetime
    
    # References to related entities
    task_ids: Optional[List[str]] = Field(None, description="UIDs of associated tasks")
    resource_ids: Optional[List[str]] = Field(None, description="UIDs of resources assigned to this project")
    manager_ids: Optional[List[str]] = Field(None, description="UIDs of agents managing this project")
    parent_project_id: Optional[str] = Field(None, description="UID of the parent project if this is a subproject")
    subproject_ids: Optional[List[str]] = Field(None, description="UIDs of child projects if this is a parent project")
    related_knowledge_asset_ids: Optional[List[str]] = Field(None, description="UIDs of knowledge assets related to this project")

# This is the model that will be returned to the client in API responses
class Project(ProjectInDB):
    pass

# Model for detailed project responses with relationship data
class ProjectDetail(Project):
    """Extended project model including relationship details"""
    tasks: Optional[List[Dict[str, Any]]] = Field(None, description="Details of tasks associated with this project")
    resources: Optional[List[Dict[str, Any]]] = Field(None, description="Details of resources assigned to this project")
    managers: Optional[List[Dict[str, Any]]] = Field(None, description="Details of agents managing this project") 
    parent_project: Optional[Dict[str, Any]] = Field(None, description="Details of the parent project")
    subprojects: Optional[List[Dict[str, Any]]] = Field(None, description="Details of child projects")
    knowledge_assets: Optional[List[Dict[str, Any]]] = Field(None, description="Knowledge assets related to this project")

# Model for Project list pagination responses
class ProjectList(BaseModel):
    """Model for paginated list of projects"""
    items: List[Project]
    total_count: int
    page: int
    page_size: int
    page_count: int
    has_next: bool
    has_previous: bool

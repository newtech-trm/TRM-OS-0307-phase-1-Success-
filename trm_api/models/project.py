from pydantic import BaseModel, Field, ConfigDict
from typing import Optional
from datetime import datetime
import uuid

# Pydantic's `model_config` is the replacement for `Config` class in V2
# We use aliases to map between camelCase (JSON payload) and snake_case (Python model)

class ProjectBase(BaseModel):
    title: str = Field(..., min_length=3, max_length=100, description="The title of the project.")
    description: Optional[str] = Field(None, max_length=500, description="A detailed description of the project.")
    status: str = Field("active", description="The current status of the project (e.g., active, completed, on_hold).")

    model_config = ConfigDict(
        from_attributes=True,  # Enable ORM mode to map neomodel objects to Pydantic models
        json_schema_extra={
            "example": {
                "title": "AI-Powered Task Automation",
                "description": "A project to automate internal workflows using AI agents.",
                "status": "active"
            }
        }
    )

class ProjectCreate(ProjectBase):
    pass

class ProjectUpdate(BaseModel):
    title: Optional[str] = Field(None, min_length=3, max_length=100)
    description: Optional[str] = Field(None, max_length=500)
    status: Optional[str] = Field(None)

# This model represents the data as it is stored in the database
# It includes fields that are generated by the system (e.g., projectId, createdAt)
class ProjectInDB(ProjectBase):
    # Using Field with alias to map the database's camelCase to Python's snake_case
    # Align these fields with the BaseNode graph_model
    uid: str
    created_at: datetime
    updated_at: datetime

# This is the model that will be returned to the client in API responses
class Project(ProjectInDB):
    pass
